// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// This file was automatically generated by VS extension Windows Machine Learning Code Generator v3
// from model file model.onnx
// Warning: This file may get overwritten if you add add an onnx file with the same name
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Windows.Media;
using Windows.Storage;
using Windows.Storage.Streams;
using Windows.AI.MachineLearning;

namespace CommunityToolkit.Labs.Intelligent.ImageClassification
{
    /// <summary>
    /// Input for the SqueezeNet model
    /// </summary>
    public sealed class Input
    {
        public TensorFloat data_0; // shape(1,3,224,224)
    }
    
    /// <summary>
    /// Output of the SqueezeNet model
    /// </summary>
    public sealed class Output
    {
        public TensorFloat softmaxout_1; // shape(1,1000,1,1)
    }
    
    /// <summary>
    /// SqueezeNet Model 
    /// </summary>
    public sealed class Model
    {
        /// <summary>
        /// LearningModel instance for the trained SqueezeNet model
        /// </summary>
        private LearningModel model;

        /// <summary>
        /// LearningModelSession instance that will be used to evaluate the model
        /// </summary>
        private LearningModelSession session;

        /// <summary>
        /// Bindings that will bind values to named input and output features.
        /// </summary>
        private LearningModelBinding binding;

        /// <summary>
        /// Loads the model, creates a session and binding instance.
        /// </summary>
        /// <param name="stream"></param>
        /// <returns></returns>
        public static async Task<Model> CreateFromStreamAsync(IRandomAccessStreamReference stream)
        {
            Model learningModel = new Model();
            learningModel.model = await LearningModel.LoadFromStreamAsync(stream);
            learningModel.session = new LearningModelSession(learningModel.model);
            learningModel.binding = new LearningModelBinding(learningModel.session);
            return learningModel;
        }

        /// <summary>
        /// Asynchronously evaluate SqueezeNet model 
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<Output> EvaluateAsync(Input input)
        {
            binding.Bind("data_0", input.data_0);
            var result = await session.EvaluateAsync(binding, "0");
            var output = new Output();
            output.softmaxout_1 = result.Outputs["softmaxout_1"] as TensorFloat;
            return output;
        }
    }
}

