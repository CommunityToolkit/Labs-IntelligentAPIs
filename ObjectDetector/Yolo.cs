// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// This file was automatically generated by VS extension Windows Machine Learning Code Generator v3
// from model file Yolo.onnx
// Warning: This file may get overwritten if you add add an onnx file with the same name
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Windows.Media;
using Windows.Storage;
using Windows.Storage.Streams;
using Windows.AI.MachineLearning;
namespace ObjectDetection
{
    /// <summary>
    /// Input for the YOLOv4 model
    /// </summary>
    public sealed class YoloInput
    {
        public ImageFeatureValue input_100; // BitmapPixelFormat: Bgra8, BitmapAlphaMode: Premultiplied, width: 416, height: 416
    }


    /// <summary>
    /// Output of the YOLOv4 model
    /// </summary>
    public sealed class YoloOutput
    {
        public TensorFloat Identity00; // shape(-1,-1,-1)
    }


    /// <summary>
    /// YOLOv4 Model 
    /// </summary>
    public sealed class YoloModel
    {

        /// <summary>
        /// LearningModel instance for the trained YOLOv4 model
        /// </summary>
        private LearningModel model;

        /// <summary>
        /// LearningModelSession instance that will be used to evaluate the model
        /// </summary>
        private LearningModelSession session;

        /// <summary>
        /// Bindings that will bind values to named input and output features.
        /// </summary>
        private LearningModelBinding binding;

        /// <summary>
        ///  Loads the model, creates a session and binding.
        /// </summary>
        /// <param name="stream"></param>
        /// <returns></returns>
        public static async Task<YoloModel> CreateFromStreamAsync(IRandomAccessStreamReference stream)
        {
            YoloModel learningModel = new YoloModel();
            learningModel.model = await LearningModel.LoadFromStreamAsync(stream);
            learningModel.session = new LearningModelSession(learningModel.model);
            learningModel.binding = new LearningModelBinding(learningModel.session);
            return learningModel;
        }

        /// <summary>
        /// Asynchronously evaluate YOLOv4 model 
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<YoloOutput> EvaluateAsync(YoloInput input)
        {
            binding.Bind("input_1:0", input.input_100);
            var result = await session.EvaluateAsync(binding, "0");
            var output = new YoloOutput();
            output.Identity00 = result.Outputs["Identity:0"] as TensorFloat;
            return output;
        }

    }
}

